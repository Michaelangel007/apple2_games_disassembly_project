// =-=-=-=-=
// Nosh Kosh
// =-=-=-=-=
// Reverse Engineered by Michaelangel007
// Apple2 Games Disassembly Project
// https://github.com/Michaelangel007/apple2_games_disassembly_project/tree/master/N/nosh_kosh

// AppleWin BUG: x 0000:FFFF

// AppleWin Debugger script
bpc
bpx 71DA

// Nosh Kosh was originally written in Applesoft (!)
// and compiled with Microsoft's TASC (The AppleSoft Compiler) (!!)
// https://devblogs.microsoft.com/oldnewthing/20220419-00/?p=106496
//
//
// There is a Microsoft copyright signature at $4F93:4FAC (Mem) in the file RUNTIME
ASC 4F93:4FAC
MA1 4F93 // MS TASC copyright signature
MA2 AA75 // DOS last filename

// FILE: N-R2.OBF
// ENTRY: $4FAD
// This is the compiled Applesoft program
// TASC generates a short init stub
//   4FAD: JSR TASC_INIT
//   4FB0: DA ? ; [0] Pointer to variables
//   4FB2: DA ? ; [1] ???
//   4FB4: DA ? ; [2] End-of-TASC runtime
//   4FB6: DA ? ; [3] End-of-TASC runtime
//   4FB8: DA ? ; [4] End-of-TASC runtime
//   4FBA: DA ? ; [5] ???
//   4FBC: DA ? ; [6] ???
//   4FBE: DA ? ; [7] ???
//   4FC0: DB 0 ; end of 16-bit pointers
//   4FC1 First line of compiled Applesoft program
sym Main = 4FAD // JSR $4000// Called by DOS BRUN: N-R2.OBJ @ $A394
da 4FB0 // $78D7 "A1B13B60B15"...
da 4FB2 // $8948
da 4FB4 // $4FAC = Main-1
da 4FB6 // $4FAC = Main-1
da 4FB8 // $4FAC = Main-1
da 4FBA // $8209
da 4FBC // $8940
da 4FBE // $8948
db 4FC0 // end-of-data pointers
sym Game_1 = 4FC1
da 4FCA // ?

// --- Zero Page ---
// A0,A1 VPNT Applesoft (overlaps with FAC+3)
//db LastInput A1

// --- TASC Runtime ---
// Install & vector so you can restart the compiled Applesoft program
// 4FAD: JSR $4000
//   AD + 2 = 4FAD -> AMPERSAND.VECTOR $35F: JMP MAIN
sym TASC_INIT          = 4000 // after JSR has 8 words, null terminated, first Applesoft line is at $4FC1
sym TASC_NextPop       = 41AE // Cleanup next args; pop 14 bytes from stack
sym TASC_StoreFACptr   = 41E2 // next 2 bytes is float to store FAC to 
sym TASC_Next          = 422E
sym TASC_AddPCdata2    = 42A2

// Copy value of pointer (Y,A) to $A0,$A1
// RESULT $63,63= Int pointer
// VPNT = Var
// X = Command
// Y,A = Data Pointer
// X
// 0 $4470 TASC_SET_INT_DST
// 1 $44AE
// 2 $44EA
// 3 $44C8
// 4 $449A
// 5 $4532
// 6 $455A
// 7 $455C
// 8 $4582
// 9 $457D
// A $4574
// B $4563
// ? $458D
sym TASC_SET_INT_DST   = 449C

// X = Command
// Y,A = Pointer to number
sym TASC_INT_CMD_X     = 4503
sym TASC_DrawSprite    = 46EB // @7145 Draw Player
sym TASC_BREAK         = 4B48 // Print $D35D string `BREAK`
// Technically called @ $794E
sym TASC_QUIT          = 4B60 // TASC @ $0803 =  $1363 Restore $00B1 CHRGET Applesoft
sym TASC_QUIT2         = 4B62
sym TASC_GET_DEC       = 4B96
sym TASC_UpdateScreen  = 4CAD
sym TASC_ON_GOSUB_A    = 4CB7 // Dispatch from array of func ptrs
sym TASC_ROT           = 4DB8 // TASC @ $0803 = $15BB
sym TASC_SCALE         = 4DC1 // TASC @ $0803 = $15C4
sym TASC_PEEK          = 4F44 // TASC @ $0803 = $1747

// X Command
// Y,A Pointer to number
//   X = 0,81..FF Load FAC from Y,A
//   X = 1, Store FAC at YX
//   X = 2..80 see TASC_FAC_CMD_X
sym TASC_FAC_LD_ST     = 4F61

// Y,A Pointer to number
// X register is FAC command
// 0 = FDIV
// 1 = FADD
// 2 = FSUB
// 3 = FMULT
// 4 = FCOMP
// 5 = Load ARG from YA
// 6+ FDIV
sym TASC_FAC_CMD_X     = 4F6A // X=0,1,2,3,4,5,6
sym TASC_FAC_ADD       = 4F85 // JMP FADD
sym TASC_FAC_SUB       = 4F82 // JMP FSUB
sym TASC_FAC_COMP      = 4F7C
sym TASC_FAC_MULT      = 4F7F // JMP FMULT
sym TASC_FAC_LOAD_ARG  = 4F88

// --- TASC TODO ---
sym TASC_46C2          = 46C2

// --- Code ---
sym DrawEnemy       = 5728 // For loop 71B9..71BC
sym DrawNextMapRow  = 5E11
sym DoneDrawMap     = 5E47
sym DrawFullMap     = 5E68 // @70CD
sym DrawNextMapTile = 5E99 // Draw sprite, click speaker
sym WaitInputType   = 6D7F // $7BD0 -> FAC @ $7082
sym HaveInputType   = 6DA8
sym FirstFrame      = 71C4 // JSR $41E2, ends up at MainLoop3
sym MainLoop        = 71D7 // second+ playable frame $44AD, $51AB (RTS) -> $71E8
sym MainLoop3       = 71DA
sym Game_Quit1      = 78D4 // JMP $794E
sym Game_Quit2      = 794E // JMP TASC_QUIT
sym Game_GetState   = 7B37 // Game State @ $823C

// --- ROM ---
sym ROM.VLIN_2      = F244
sym ROM.HTAB_3      = F7EA
sym ROM.VTAB_3      = F259
sym ROM.CONINT_3    = E6FE // Entry Point E6FB // FAC to Byte -> X
df CON_ONE          = E913 // Applesoft 1.0

da 5E54 // $0000
da 5E82 // $0000
da 6DDE // $6DCC
da 6EE4 // $6ED6
da 6EFD // $6EF2
da 6F54 // $0000
da 6F56 // $0000
da 70BC // $70B7
da 7143 // $713E
da 71BF // $0000
da 71C7 // $82A2 // -> A.TMPST $55,$56; 420C: JSR STORE.FAC.AT.YX YX=$82A2
df 82A2
da 71D5 // $0000

db 71DD
// AppleWin BUG: da 71DE:71E7
da 71DE
da 71E0
da 71E2
da 71E4
da 71E6

db 50f4
// AppleWin BUG: da 50F5:50FC
da 50F5
da 50F7
da 50F9
da 50FB

sym P_590C = 590C // @71DE
sym P_50EE = 50EE // @71E2
sym P_6207 = 6207 // @71E4

sym P_50FD = 50FD // @50F5
sym P_5225 = 5225 // @5225
sym P_534D = 534D // @50F9
sym P_54C1 = 54C1 // @50FB

//BPM 06EF // MeatHours
//BPM 06F3 // MeatMinTens
//BPM      // MeatMinOnes
ASC TextMeatHours    06EF
ASC TextMeatMinTens  06F3
ASC TextMeatMinOnes  06F5
